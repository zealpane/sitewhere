description = 'SiteWhere Event Sources Microservice'

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
	
	// Connectivity to other microservices.
	compile project(':sitewhere-grpc-device-management')
	compile project(':sitewhere-grpc-event-management')
	
    compile group: 'org.springframework', name: 'spring-web'
	
	// ActiveMQ dependencies.
    compile group: 'org.apache.activemq', name: 'activemq-amqp', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-mqtt', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-stomp', version:'5.14.0'
    compile group: 'org.apache.activemq', name: 'activemq-kahadb-store', version:'5.14.0'
    
    // Azure dependencies.
    compile group: 'com.microsoft.azure', name: 'azure-eventhubs-eph', version:'1.0.0'
    
    // RabbitMQ dependencies.
    compile group: 'com.rabbitmq', name: 'amqp-client', version:'3.6.0'
	
	// WebSocket dependencies.
    compile group: 'javax.websocket', name: 'javax.websocket-api', version:'1.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-server', version:'1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-server', version:'1.13.1'
}
test {
    exclude '**/*'
}

license {
	exclude "**/azure/**"
}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.sources.EventSourcesApplication'
}

// Keep original jar.
jar {
	enabled = true
}

// Reclassify Spring Boot jar.
bootJar {
	classifier = 'boot'
}

// Only publish thin jar.
apply plugin: 'maven-publish'
publishing {
	publications {
        mavenJava(MavenPublication) {
            from components.java
        }
	}
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootJar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}-boot.jar", "/")
	
	// Copy script templates.
	copyFile("script-templates", "/script-templates")

	// Run Java command to start application.
	if(!project.hasProperty("debug")) {
		defaultCommand 'java', '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.jar"
	} else {
		println "Generating DEBUG IMAGE for project ${project.name}"

		def jdwpPort = 8001
		def jmxPort = 1107
		
		// Set Env 
		environmentVariable('JMX_HOST', '0.0.0.0')

		// Expose ports.
		exposePort jdwpPort
		exposePort jmxPort

		defaultCommand 'java', '-server', '-Xdebug', '-Dcom.sun.management.jmxremote.local.only=false', '-Dcom.sun.management.jmxremote.ssl=false', '-Dcom.sun.management.jmxremote.authenticate=false', "-Dcom.sun.management.jmxremote.port=${jmxPort}", "-Dcom.sun.management.jmxremote.rmi.port=${jmxPort}", '-Dcom.sun.management.jmxremote.host=0.0.0.0', '-Djava.rmi.server.hostname=0.0.0.0', "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${jdwpPort}", '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.jar"
	}
}

// Copy artifacts to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-boot.jar"
	from "${projectDir}/dockerimage" 
	into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
 	if(!project.hasProperty("debug")) {
	    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
	} else {
	    tag = "${dockerRepository}/sitewhere/${project.name}:debug-${version}"		
	}
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
