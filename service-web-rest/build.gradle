import org.ajoberstar.grgit.*

description = 'SiteWhere Web/REST Microservice'

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.web.WebRestApplication'
}

apply plugin: 'com.moowork.node'
node {
	version = '8.10.0'
	npmVersion = '5.7.1'
	nodeModulesDir = file("${projectDir}/sitewhere-ui-build/sitewhere2-admin-ui")
	npmWorkDir = file("${projectDir}/sitewhere-ui-build")
	download = true
}

dependencies {
	compile project(':sitewhere-communication')
	compile project(':sitewhere-microservice')
	
	// Connectivity to other microservices.
	compile project(':sitewhere-grpc-asset-management')
	compile project(':sitewhere-grpc-batch-management')
	compile project(':sitewhere-grpc-device-management')
	compile project(':sitewhere-grpc-device-state')
	compile project(':sitewhere-grpc-event-management')
	compile project(':sitewhere-grpc-label-generation')
	compile project(':sitewhere-grpc-schedule-management')
	compile project(':sitewhere-grpc-user-management')
	
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('org.springframework.boot:spring-boot-starter-websocket')    
	compile group: 'org.springframework', name: 'spring-web'
	
	// Swagger
	compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.21'
	compile group: 'io.swagger', name: 'swagger-models', version: '1.5.21'
    compile group: 'io.springfox', name: 'springfox-swagger2', version:'2.9.2'
    
    implementation('io.swagger:swagger-annotations:1.5.21') {
        force = true
    }
    implementation('io.swagger:swagger-models:1.5.21') {
        force = true
    }
 
    // Spring Security
    compile group: 'org.springframework.security', name: 'spring-security-config'
    compile group: 'org.springframework.security', name: 'spring-security-web'
	
	// Quartz.
    compile group: 'org.quartz-scheduler', name: 'quartz', version:'2.2.2'
	
	// Tracing support for Spring web components.
    compile group: 'io.opentracing.contrib', name: 'opentracing-spring-web', version:'0.0.10'
}

// Pull SiteWhere admin user interface from GitHub.
task pullSwaggerUserInterface() {
	// Clone SiteWhere repository.
	delete "${projectDir}/sitewhere-ui-build/sitewhere2-swagger-ui"
	println "Pulling sitewhere2-swagger-ui from GitHub..."
	def repo = Grgit.clone(dir: "${projectDir}/sitewhere-ui-build/sitewhere2-swagger-ui", 
		uri: 'https://github.com/sitewhere/sitewhere2-swagger-ui.git')
	repo.close()
}

// Before building the Spring Boot WAR, copy Swagger interface.
apply plugin: 'war'
bootWar {
	classifier = 'boot'
	dependsOn pullSwaggerUserInterface
	with {
		from( "${projectDir}/sitewhere-ui-build/sitewhere2-swagger-ui" )
	}
}

// Keep original jar.
jar { enabled = true }

// Only publish thin jar.
apply plugin: 'maven-publish'
publishing {
    publications {
	mavenJava(MavenPublication) { from components.java }
    }
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootWar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    maintainer "${rootProject.ext['docker.maintainer']}"
	
	// Copy Spring Boot jar.
	copyFile("${project.name}-${project.version}-boot.war", "/")

	// Expose port
	exposePort 8080

	// Run Java command to start application.
	if(!project.hasProperty("debug")) {
		defaultCommand 'java', '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.war"
	} else {
		println "Generating DEBUG IMAGE for project ${project.name}"

		def jdwpPort = 8001
		def jmxPort = 1110
		
		// Set Env 
		environmentVariable('JMX_HOST', '0.0.0.0')

		// Expose ports.
		exposePort jdwpPort
		exposePort jmxPort

		defaultCommand 'java', '-server', '-Xdebug', '-Dcom.sun.management.jmxremote.local.only=false', '-Dcom.sun.management.jmxremote.ssl=false', '-Dcom.sun.management.jmxremote.authenticate=false', "-Dcom.sun.management.jmxremote.port=${jmxPort}", "-Dcom.sun.management.jmxremote.rmi.port=${jmxPort}", '-Dcom.sun.management.jmxremote.host=0.0.0.0', '-Djava.rmi.server.hostname=0.0.0.0', "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${jdwpPort}", '-Xmx768M', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-jar', "/${project.name}-${project.version}-boot.war"
	}
}

// Copy artifact to Docker input folder.
task copyArtifactToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-boot.war"
    into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactToDocker) {
    inputDir = project.file('build/docker')
 	if(!project.hasProperty("debug")) {
	    tag = "${dockerRepository}/sitewhere/${project.name}:${version}"
	} else {
	    tag = "${dockerRepository}/sitewhere/${project.name}:debug-${version}"		
	}
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}"
    tag = "${version}"
}
