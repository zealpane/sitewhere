syntax = "proto3";

package com.sitewhere.grpc.service;

option java_multiple_files = true;
option java_package = "com.sitewhere.grpc.service";
option java_outer_classname = "TenantServices";

import "sitewhere-common.proto";
import "tenant-model.proto";

// Tenant management APIs.
service TenantManagement {

	// ###############
	// ### TENANTS ###
	// ###############

	// Create a new tenant.
	rpc CreateTenant (GCreateTenantRequest) returns (GCreateTenantResponse) {}

	// Update an existing tenant.
	rpc UpdateTenant (GUpdateTenantRequest) returns (GUpdateTenantResponse) {}

	// Get a tenant by unique id.
	rpc GetTenantById (GGetTenantByIdRequest) returns (GGetTenantByIdResponse) {}

	// Get a tenant by token.
	rpc GetTenantByToken (GGetTenantByTokenRequest) returns (GGetTenantByTokenResponse) {}

	// List tenants based on criteria.
	rpc ListTenants (GListTenantsRequest) returns (GListTenantsResponse) {}

	// Delete an existing tenant.
	rpc DeleteTenant (GDeleteTenantRequest) returns (GDeleteTenantResponse) {}

	// ########################
	// ### TENANT TEMPLATES ###
	// ########################

	// Get list of available tenant templates.
	rpc GetTenantTemplates (GGetTenantTemplatesRequest) returns (GGetTenantTemplatesResponse) {}

	// Get list of available dataset templates.
	rpc GetDatasetTemplates (GGetDatasetTemplatesRequest) returns (GGetDatasetTemplatesResponse) {}
}

// ###############
// ### TENANTS ###
// ###############
	
// Request for creating a tenant.
message GCreateTenantRequest {
	com.sitewhere.grpc.model.GTenantCreateRequest request = 1;
}

// Response from creating a tenant.
message GCreateTenantResponse {
	com.sitewhere.grpc.model.GTenant tenant = 1;
}
	
// Request for updating a tenant.
message GUpdateTenantRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
	com.sitewhere.grpc.model.GTenantCreateRequest request = 2;
}

// Response from updating a tenant.
message GUpdateTenantResponse {
	com.sitewhere.grpc.model.GTenant tenant = 1;
}
	
// Request for getting a tenant by id.
message GGetTenantByIdRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}

// Response for getting a tenant by id.
message GGetTenantByIdResponse {
	com.sitewhere.grpc.model.GTenant tenant = 1;
}
	
// Request for getting a tenant by token.
message GGetTenantByTokenRequest {
	string token = 1;
}

// Response for getting a tenant by token.
message GGetTenantByTokenResponse {
	com.sitewhere.grpc.model.GTenant tenant = 1;
}

// Request for listing tenants by critieria.
message GListTenantsRequest {
	com.sitewhere.grpc.model.GTenantSearchCriteria criteria = 1; 
}

// Response for listing tenants by critieria.
message GListTenantsResponse {
	com.sitewhere.grpc.model.GTenantSearchResults results = 1; 
}

// Request for deleting a tenant.
message GDeleteTenantRequest {
	com.sitewhere.grpc.model.GUUID id = 1;
}

// Response for deleting a tenant.
message GDeleteTenantResponse {
	com.sitewhere.grpc.model.GTenant tenant = 1; 
}

// ########################
// ### TENANT TEMPLATES ###
// ########################
	
// Request for getting a list of available tenant templates.
message GGetTenantTemplatesRequest {
}

// Response for getting a list of available tenant templates.
message GGetTenantTemplatesResponse {
	repeated com.sitewhere.grpc.model.GTenantTemplate template = 1;
}
	
// Request for getting a list of available dataset templates.
message GGetDatasetTemplatesRequest {
}

// Response for getting a list of available dataset templates.
message GGetDatasetTemplatesResponse {
	repeated com.sitewhere.grpc.model.GDatasetTemplate template = 1;
}
